// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace apps.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20210121181153_first")]
    partial class first
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Models.Affectation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateEffet")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdCollaborateur")
                        .HasColumnType("int");

                    b.Property<int>("IdEntite")
                        .HasColumnType("int");

                    b.Property<int>("IdFonction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCollaborateur");

                    b.HasIndex("IdEntite");

                    b.HasIndex("IdFonction");

                    b.ToTable("Affectations");
                });

            modelBuilder.Entity("Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CodeImmobilisation")
                        .HasColumnType("int");

                    b.Property<int>("IdConstructeur")
                        .HasColumnType("int");

                    b.Property<int>("IdFamille")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QteEnStock")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TauxAmortissement")
                        .HasColumnType("int");

                    b.Property<string>("UniteMesure")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdConstructeur");

                    b.HasIndex("IdFamille");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Models.Categorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Poids")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Models.Collaborateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Actif")
                        .HasColumnType("bit");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Matricule")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Collaborateurs");
                });

            modelBuilder.Entity("Models.Constructeur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Representant")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Constructeurs");
                });

            modelBuilder.Entity("Models.DetailsRecpetion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateMiseEnService")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdArticle")
                        .HasColumnType("int");

                    b.Property<int>("IdReception")
                        .HasColumnType("int");

                    b.Property<string>("Mobilite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroInventaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroSerie")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrixUnitaireHT")
                        .HasColumnType("int");

                    b.Property<int>("Quantit")
                        .HasColumnType("int");

                    b.Property<string>("Statut")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdReception");

                    b.ToTable("DetailsRecpetions");
                });

            modelBuilder.Entity("Models.Entite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("IdCategorie")
                        .HasColumnType("int");

                    b.Property<int>("IdParent")
                        .HasColumnType("int");

                    b.Property<int>("IdSite")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdCategorie");

                    b.HasIndex("IdParent");

                    b.HasIndex("IdSite");

                    b.ToTable("Entites");
                });

            modelBuilder.Entity("Models.Famille", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ComptagePar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdParent")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdParent");

                    b.ToTable("Familles");
                });

            modelBuilder.Entity("Models.Fonction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Decision")
                        .HasColumnType("bit");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Responsabilite")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Fonctions");
                });

            modelBuilder.Entity("Models.Fournisseur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patente")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rib")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Fournisseurs");
                });

            modelBuilder.Entity("Models.Organisme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Organismes");
                });

            modelBuilder.Entity("Models.Reception", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateReception")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdFournisseur")
                        .HasColumnType("int");

                    b.Property<int>("MontantTotal")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdFournisseur");

                    b.ToTable("Receptions");
                });

            modelBuilder.Entity("Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdOrganisme")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdOrganisme");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("Models.Affectation", b =>
                {
                    b.HasOne("Models.Collaborateur", "Collaborateur")
                        .WithMany("Affectations")
                        .HasForeignKey("IdCollaborateur")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entite", "Entite")
                        .WithMany("Affectations")
                        .HasForeignKey("IdEntite")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Fonction", "Fonction")
                        .WithMany("Affectations")
                        .HasForeignKey("IdFonction")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Collaborateur");

                    b.Navigation("Entite");

                    b.Navigation("Fonction");
                });

            modelBuilder.Entity("Models.Article", b =>
                {
                    b.HasOne("Models.Constructeur", "Constructeur")
                        .WithMany("Articles")
                        .HasForeignKey("IdConstructeur")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Famille", "Famille")
                        .WithMany("Articles")
                        .HasForeignKey("IdFamille")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Constructeur");

                    b.Navigation("Famille");
                });

            modelBuilder.Entity("Models.DetailsRecpetion", b =>
                {
                    b.HasOne("Models.Article", "Article")
                        .WithMany("DetailsRecpetions")
                        .HasForeignKey("IdArticle")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Reception", "Reception")
                        .WithMany("DetailsRecpetions")
                        .HasForeignKey("IdReception")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Reception");
                });

            modelBuilder.Entity("Models.Entite", b =>
                {
                    b.HasOne("Models.Categorie", "Categorie")
                        .WithMany("Entites")
                        .HasForeignKey("IdCategorie")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Entite", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("IdParent")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Models.Site", "Site")
                        .WithMany("Entites")
                        .HasForeignKey("IdSite")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Categorie");

                    b.Navigation("Parent");

                    b.Navigation("Site");
                });

            modelBuilder.Entity("Models.Famille", b =>
                {
                    b.HasOne("Models.Famille", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("IdParent")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Models.Reception", b =>
                {
                    b.HasOne("Models.Fournisseur", "Fournisseur")
                        .WithMany("Receptions")
                        .HasForeignKey("IdFournisseur")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fournisseur");
                });

            modelBuilder.Entity("Models.Site", b =>
                {
                    b.HasOne("Models.Organisme", "Organisme")
                        .WithMany("Sites")
                        .HasForeignKey("IdOrganisme")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Organisme");
                });

            modelBuilder.Entity("Models.Article", b =>
                {
                    b.Navigation("DetailsRecpetions");
                });

            modelBuilder.Entity("Models.Categorie", b =>
                {
                    b.Navigation("Entites");
                });

            modelBuilder.Entity("Models.Collaborateur", b =>
                {
                    b.Navigation("Affectations");
                });

            modelBuilder.Entity("Models.Constructeur", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Models.Entite", b =>
                {
                    b.Navigation("Affectations");

                    b.Navigation("Childs");
                });

            modelBuilder.Entity("Models.Famille", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Childs");
                });

            modelBuilder.Entity("Models.Fonction", b =>
                {
                    b.Navigation("Affectations");
                });

            modelBuilder.Entity("Models.Fournisseur", b =>
                {
                    b.Navigation("Receptions");
                });

            modelBuilder.Entity("Models.Organisme", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("Models.Reception", b =>
                {
                    b.Navigation("DetailsRecpetions");
                });

            modelBuilder.Entity("Models.Site", b =>
                {
                    b.Navigation("Entites");
                });
#pragma warning restore 612, 618
        }
    }
}
